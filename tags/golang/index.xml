<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on Maciej Mróz Personal Blog</title>
    <link>https://maciejmroz.com/tags/golang/</link>
    <description>Recent content in Golang on Maciej Mróz Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 13:17:09 +0100</lastBuildDate><atom:link href="https://maciejmroz.com/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing password storage with Golang</title>
      <link>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</link>
      <pubDate>Sun, 05 Feb 2017 13:17:09 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</guid>
      <description>The common wisdom says: &amp;ldquo;Do not implement password storage on your own&amp;rdquo; &amp;hellip; Considering amount of things that can be done wrong, perhaps relying on one of plenty of external providers is the right thing to do :) If you still want to do this, read OWASP Password Storage Cheat Sheet as a first step. After that, read OWASP Authentication Cheat Sheet - password storage and authentication are close layers and most likely you&amp;rsquo;ll be working on both.</description>
    </item>
    
    <item>
      <title>Going for simplicity with Go</title>
      <link>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</link>
      <pubDate>Tue, 27 Dec 2016 17:03:44 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</guid>
      <description>If you are backend engineer, you probably treat nonfunctional requirements like security, availability, scalability etc. just as if they were laws of physics. And that&amp;rsquo;s good when working on mature, mission critical systems. But what if you don&amp;rsquo;t need all that and want to simply focus on getting something simple but professionally looking out there? Something like MVP/early stage product?
Do you really need microservices, containers, service discovery, load balancers, caches, multiple databases, all clustered and replicated accross multiple availability zones?</description>
    </item>
    
  </channel>
</rss>
