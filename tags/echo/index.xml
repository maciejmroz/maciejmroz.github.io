<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Echo on Maciej Mróz Personal Blog</title>
    <link>https://maciejmroz.com/tags/echo/</link>
    <description>Recent content in Echo on Maciej Mróz Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Dec 2016 17:03:44 +0100</lastBuildDate><atom:link href="https://maciejmroz.com/tags/echo/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Going for simplicity with Go</title>
      <link>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</link>
      <pubDate>Tue, 27 Dec 2016 17:03:44 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</guid>
      <description>If you are backend engineer, you probably treat nonfunctional requirements like security, availability, scalability etc. just as if they were laws of physics. And that&amp;rsquo;s good when working on mature, mission critical systems. But what if you don&amp;rsquo;t need all that and want to simply focus on getting something simple but professionally looking out there? Something like MVP/early stage product?
Do you really need microservices, containers, service discovery, load balancers, caches, multiple databases, all clustered and replicated accross multiple availability zones?</description>
    </item>
    
  </channel>
</rss>
