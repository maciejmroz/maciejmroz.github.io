<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Server Side on Maciej Mróz Personal Blog</title>
    <link>https://maciejmroz.com/categories/server-side/</link>
    <description>Recent content in Server Side on Maciej Mróz Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 13:17:09 +0100</lastBuildDate><atom:link href="https://maciejmroz.com/categories/server-side/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing password storage with Golang</title>
      <link>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</link>
      <pubDate>Sun, 05 Feb 2017 13:17:09 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</guid>
      <description>The common wisdom says: &amp;ldquo;Do not implement password storage on your own&amp;rdquo; &amp;hellip; Considering amount of things that can be done wrong, perhaps relying on one of plenty of external providers is the right thing to do :) If you still want to do this, read OWASP Password Storage Cheat Sheet as a first step. After that, read OWASP Authentication Cheat Sheet - password storage and authentication are close layers and most likely you&amp;rsquo;ll be working on both.</description>
    </item>
    
    <item>
      <title>Going for simplicity with Go</title>
      <link>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</link>
      <pubDate>Tue, 27 Dec 2016 17:03:44 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</guid>
      <description>If you are backend engineer, you probably treat nonfunctional requirements like security, availability, scalability etc. just as if they were laws of physics. And that&amp;rsquo;s good when working on mature, mission critical systems. But what if you don&amp;rsquo;t need all that and want to simply focus on getting something simple but professionally looking out there? Something like MVP/early stage product?
Do you really need microservices, containers, service discovery, load balancers, caches, multiple databases, all clustered and replicated accross multiple availability zones?</description>
    </item>
    
    <item>
      <title>Beyond virtualization</title>
      <link>https://maciejmroz.com/2015/01/01/beyond-virtualization/</link>
      <pubDate>Thu, 01 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2015/01/01/beyond-virtualization/</guid>
      <description>I guess it&amp;rsquo;s time to sum up recent trends in how we build, deploy, and operate complex server side software. Virtualization and cloud computing have been with us for quite a while but right now the era of containers is coming, with entire Docker ecosystem paving the way. You might want to ask a very valid question: &amp;ldquo;What&amp;rsquo;s in it for me?&amp;rdquo; :) I will focus on business implications of the technology.</description>
    </item>
    
    <item>
      <title>Functional programming trojan horse</title>
      <link>https://maciejmroz.com/2013/09/22/functional-programming-trojan-horse/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2013/09/22/functional-programming-trojan-horse/</guid>
      <description>All of game server code at my current company is using C++, and we are still starting new projects using existing C++ framework. I gave a presentation on our server architecture a few months ago, available here (it&amp;rsquo;s in Polish, it was local event here in Kraków). After giving the presentation I was approached by a guy (sorry, don&amp;rsquo;t remember the name) who said something like: &amp;ldquo;It&amp;rsquo;s cool you did all that in C++.</description>
    </item>
    
    <item>
      <title>Is virtualization a failure of operating systems?</title>
      <link>https://maciejmroz.com/2012/12/19/is-virtualization-a-failure-of-operating-systems/</link>
      <pubDate>Wed, 19 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2012/12/19/is-virtualization-a-failure-of-operating-systems/</guid>
      <description>One thing has hit me while watching of this year&amp;rsquo;s LinuxCon Europe presentations - one of reasons virtualization exists in the first place is operating system inability to properly isolate the applications from each other. Look at it this way: the role of operating systems is abstracting the physical hardware from the applications. And what is the role of hypervisor? Abstracting the hardware from the opertaing system(s) … Which makes the operating system an application running under the hypervisor, doesn&amp;rsquo;t it?</description>
    </item>
    
    <item>
      <title>Enter the Node.js</title>
      <link>https://maciejmroz.com/2012/07/07/enter-the-node-js/</link>
      <pubDate>Sat, 07 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2012/07/07/enter-the-node-js/</guid>
      <description>The title says it all, but I probably still should paint some background to this article. Imagine a system where you need very high performance, you need it yesterday, and you don&amp;rsquo;t have infinite funds to simply throw more hardware at the problem. Very important component in this system is a web server. Very simple requests, always generated by code (while system in question does not provide data to end users, you can think of AJAX - definitely there&amp;rsquo;s a similarity).</description>
    </item>
    
  </channel>
</rss>
