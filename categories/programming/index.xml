<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Maciej Mróz Personal Blog</title>
    <link>https://maciejmroz.com/categories/programming/</link>
    <description>Recent content in Programming on Maciej Mróz Personal Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 13:17:09 +0100</lastBuildDate><atom:link href="https://maciejmroz.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Implementing password storage with Golang</title>
      <link>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</link>
      <pubDate>Sun, 05 Feb 2017 13:17:09 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2017/02/05/implementing-password-storage-with-golang/</guid>
      <description>The common wisdom says: &amp;ldquo;Do not implement password storage on your own&amp;rdquo; &amp;hellip; Considering amount of things that can be done wrong, perhaps relying on one of plenty of external providers is the right thing to do :) If you still want to do this, read OWASP Password Storage Cheat Sheet as a first step. After that, read OWASP Authentication Cheat Sheet - password storage and authentication are close layers and most likely you&amp;rsquo;ll be working on both.</description>
    </item>
    
    <item>
      <title>Going for simplicity with Go</title>
      <link>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</link>
      <pubDate>Tue, 27 Dec 2016 17:03:44 +0100</pubDate>
      
      <guid>https://maciejmroz.com/2016/12/27/going-for-simplicity-with-go/</guid>
      <description>If you are backend engineer, you probably treat nonfunctional requirements like security, availability, scalability etc. just as if they were laws of physics. And that&amp;rsquo;s good when working on mature, mission critical systems. But what if you don&amp;rsquo;t need all that and want to simply focus on getting something simple but professionally looking out there? Something like MVP/early stage product?
Do you really need microservices, containers, service discovery, load balancers, caches, multiple databases, all clustered and replicated accross multiple availability zones?</description>
    </item>
    
    <item>
      <title>Functional programming trojan horse</title>
      <link>https://maciejmroz.com/2013/09/22/functional-programming-trojan-horse/</link>
      <pubDate>Sun, 22 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2013/09/22/functional-programming-trojan-horse/</guid>
      <description>All of game server code at my current company is using C++, and we are still starting new projects using existing C++ framework. I gave a presentation on our server architecture a few months ago, available here (it&amp;rsquo;s in Polish, it was local event here in Kraków). After giving the presentation I was approached by a guy (sorry, don&amp;rsquo;t remember the name) who said something like: &amp;ldquo;It&amp;rsquo;s cool you did all that in C++.</description>
    </item>
    
    <item>
      <title>C&#43;&#43;11 Goodness</title>
      <link>https://maciejmroz.com/2013/05/04/c11-goodness/</link>
      <pubDate>Sat, 04 May 2013 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2013/05/04/c11-goodness/</guid>
      <description>While most of my programming life used to be centered around C++, nowadays I do not really spend much time with the language at work (other than doing code reviews). I remain big fan of C++. Despite the fact it&amp;rsquo;s not very fashionable language, it is extremely efficient and quite flexible. What&amp;rsquo;s even more important it&amp;rsquo;s continuing to evolve, and it evolves in the right direction. I took some time to try out the C++11 features refactoring small private project, and it really looks good.</description>
    </item>
    
    <item>
      <title>What can one day of coding bring?</title>
      <link>https://maciejmroz.com/2012/12/01/what-can-one-day-of-coding-bring/</link>
      <pubDate>Sat, 01 Dec 2012 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2012/12/01/what-can-one-day-of-coding-bring/</guid>
      <description>We&amp;rsquo;ve had our first internal hackaton recently at Ganymede. We don&amp;rsquo;t have &amp;ldquo;20% time&amp;rdquo; rule or anything like that, so the entire thing was a huge experiment. What we did was to take not one, but two days (Thursday and Friday) off our normal schedule to allow people do some cool stuff.Obviosly, because we are a game development company, most teams decided to a game. With all my responsibilities, I did not commit to any team, but decided to do small project on my own - to last minute I did not actually know if I would be tied up in other stuff or not.</description>
    </item>
    
    <item>
      <title>If you haven&#39;t noticed, OpenGL API is alive and kicking</title>
      <link>https://maciejmroz.com/2012/03/04/if-you-havent-noticed-opengl-api-is-alive-and-kicking/</link>
      <pubDate>Sun, 04 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://maciejmroz.com/2012/03/04/if-you-havent-noticed-opengl-api-is-alive-and-kicking/</guid>
      <description>Recently I somehow found enough time to read &amp;ldquo;OpenGL SuperBible, 5th edition&amp;rdquo;. It was something done purely for fun, just to see how things are looking today for modern graphics APIs. Last time I did any serious graphics programming, OpenGL was slowly dying.
In fact, my M.Sc. thesis used Direct3D as implementation API. I simply had no choice. There was no standard for anything - every single important feature was exposed through extensions.</description>
    </item>
    
  </channel>
</rss>
